// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserAuthApiClient is the client API for UserAuthApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthApiClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*UserToken, error)
	GetAuthenticated(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthenticatedUser, error)
}

type userAuthApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthApiClient(cc grpc.ClientConnInterface) UserAuthApiClient {
	return &userAuthApiClient{cc}
}

func (c *userAuthApiClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*UserToken, error) {
	out := new(UserToken)
	err := c.cc.Invoke(ctx, "/auth.UserAuthApi/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthApiClient) GetAuthenticated(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthenticatedUser, error) {
	out := new(AuthenticatedUser)
	err := c.cc.Invoke(ctx, "/auth.UserAuthApi/GetAuthenticated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthApiServer is the server API for UserAuthApi service.
// All implementations must embed UnimplementedUserAuthApiServer
// for forward compatibility
type UserAuthApiServer interface {
	Login(context.Context, *LoginReq) (*UserToken, error)
	GetAuthenticated(context.Context, *empty.Empty) (*AuthenticatedUser, error)
	mustEmbedUnimplementedUserAuthApiServer()
}

// UnimplementedUserAuthApiServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthApiServer struct {
}

func (UnimplementedUserAuthApiServer) Login(context.Context, *LoginReq) (*UserToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserAuthApiServer) GetAuthenticated(context.Context, *empty.Empty) (*AuthenticatedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticated not implemented")
}
func (UnimplementedUserAuthApiServer) mustEmbedUnimplementedUserAuthApiServer() {}

// UnsafeUserAuthApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthApiServer will
// result in compilation errors.
type UnsafeUserAuthApiServer interface {
	mustEmbedUnimplementedUserAuthApiServer()
}

func RegisterUserAuthApiServer(s *grpc.Server, srv UserAuthApiServer) {
	s.RegisterService(&_UserAuthApi_serviceDesc, srv)
}

func _UserAuthApi_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthApiServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.UserAuthApi/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthApiServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthApi_GetAuthenticated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthApiServer).GetAuthenticated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.UserAuthApi/GetAuthenticated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthApiServer).GetAuthenticated(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAuthApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.UserAuthApi",
	HandlerType: (*UserAuthApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserAuthApi_Login_Handler,
		},
		{
			MethodName: "GetAuthenticated",
			Handler:    _UserAuthApi_GetAuthenticated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
