// Code generated by protoc-gen-cdd. DO NOT EDIT.
// source: billing.proto
package billing

import (
	"net/http"
	"strings"

	"github.com/herryg91/cdd/grst"
	grst_errors "github.com/herryg91/cdd/grst/errors"
	"google.golang.org/grpc"

	"github.com/mcuadros/go-defaults"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials"
	"gopkg.in/validator.v2"
)

type fullMethods struct {
	BillingApi_GetBillingByLoanCode   string
	BillingApi_GetBillingOverDue      string
	BillingApi_GenerateBillingPayment string
	BillingApi_SettleBillingPayment   string
}

var FullMethods = fullMethods{
	BillingApi_GetBillingByLoanCode:   "/billing.BillingApi/GetBillingByLoanCode",
	BillingApi_GetBillingOverDue:      "/billing.BillingApi/GetBillingOverDue",
	BillingApi_GenerateBillingPayment: "/billing.BillingApi/GenerateBillingPayment",
	BillingApi_SettleBillingPayment:   "/billing.BillingApi/SettleBillingPayment",
}

var NeedAuthFullMethods = []string{
	"/billing.BillingApi/GetBillingByLoanCode",
	"/billing.BillingApi/GetBillingOverDue",
	"/billing.BillingApi/GenerateBillingPayment",
	"/billing.BillingApi/SettleBillingPayment",
}

type AuthConfig struct {
	NeedAuth bool
	Roles    []string
}

var AuthConfigFullMethods = map[string]AuthConfig{
	"/billing.BillingApi/GetBillingByLoanCode":   AuthConfig{NeedAuth: true, Roles: []string{"*"}},
	"/billing.BillingApi/GetBillingOverDue":      AuthConfig{NeedAuth: true, Roles: []string{"*"}},
	"/billing.BillingApi/GenerateBillingPayment": AuthConfig{NeedAuth: true, Roles: []string{"*"}},
	"/billing.BillingApi/SettleBillingPayment":   AuthConfig{NeedAuth: true, Roles: []string{"*"}},
}

var NeedApiKeyFullMethods = []string{}

func ValidateRequest(req interface{}) error {
	defaults.SetDefaults(req)
	if errs := validator.Validate(req); errs != nil {
		validateError := []*grst_errors.ErrorDetail{}
		for field, err := range errs.(validator.ErrorMap) {
			errMessage := strings.Replace(err.Error(), "{field}", field, -1)
			validateError = append(validateError, &grst_errors.ErrorDetail{Code: 999, Field: field, Message: errMessage})
		}
		return grst_errors.New(http.StatusBadRequest, codes.InvalidArgument, 999, "Validation Error", validateError...)
	}

	return nil
}

/*==================== BillingApi Section ====================*/

func RegisterBillingApiGrstServer(grpcRestServer *grst.Server, hndl BillingApiServer) {

	forward_BillingApi_GetBillingByLoanCode_0 = grpcRestServer.GetForwardResponseMessage()

	forward_BillingApi_GetBillingOverDue_0 = grpcRestServer.GetForwardResponseMessage()

	forward_BillingApi_GenerateBillingPayment_0 = grpcRestServer.GetForwardResponseMessage()

	forward_BillingApi_SettleBillingPayment_0 = grpcRestServer.GetForwardResponseMessage()

	RegisterBillingApiServer(grpcRestServer.GetGrpcServer(), hndl)
	grpcRestServer.RegisterRestHandler(RegisterBillingApiHandler)
}

func NewBillingApiGrstClient(serverHost string, creds *credentials.TransportCredentials, dialOpts ...grpc.DialOption) (BillingApiClient, error) {
	opts := []grpc.DialOption{}
	opts = append(opts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(1024*1024*20)))
	opts = append(opts, grpc.WithMaxMsgSize(1024*1024*20))
	if creds == nil {
		opts = append(opts, grpc.WithInsecure())
	} else {
		opts = append(opts, grpc.WithTransportCredentials(*creds))
	}
	opts = append(opts, dialOpts...)
	grpcConn, err := grpc.Dial(serverHost, opts...)
	return NewBillingApiClient(grpcConn), err
}
