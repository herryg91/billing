// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package loan

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LoanApiClient is the client API for LoanApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanApiClient interface {
	GetMySummary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoanSummary, error)
	SimulateLoan(ctx context.Context, in *SimulateLoanReq, opts ...grpc.CallOption) (*LoanSimulation, error)
	CreateLoan(ctx context.Context, in *CreateLoanReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLoans(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Loans, error)
	GetLoanByCode(ctx context.Context, in *GetLoanByCodeReq, opts ...grpc.CallOption) (*Loan, error)
}

type loanApiClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanApiClient(cc grpc.ClientConnInterface) LoanApiClient {
	return &loanApiClient{cc}
}

func (c *loanApiClient) GetMySummary(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoanSummary, error) {
	out := new(LoanSummary)
	err := c.cc.Invoke(ctx, "/loan.LoanApi/GetMySummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanApiClient) SimulateLoan(ctx context.Context, in *SimulateLoanReq, opts ...grpc.CallOption) (*LoanSimulation, error) {
	out := new(LoanSimulation)
	err := c.cc.Invoke(ctx, "/loan.LoanApi/SimulateLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanApiClient) CreateLoan(ctx context.Context, in *CreateLoanReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/loan.LoanApi/CreateLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanApiClient) GetLoans(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Loans, error) {
	out := new(Loans)
	err := c.cc.Invoke(ctx, "/loan.LoanApi/GetLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanApiClient) GetLoanByCode(ctx context.Context, in *GetLoanByCodeReq, opts ...grpc.CallOption) (*Loan, error) {
	out := new(Loan)
	err := c.cc.Invoke(ctx, "/loan.LoanApi/GetLoanByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanApiServer is the server API for LoanApi service.
// All implementations must embed UnimplementedLoanApiServer
// for forward compatibility
type LoanApiServer interface {
	GetMySummary(context.Context, *empty.Empty) (*LoanSummary, error)
	SimulateLoan(context.Context, *SimulateLoanReq) (*LoanSimulation, error)
	CreateLoan(context.Context, *CreateLoanReq) (*empty.Empty, error)
	GetLoans(context.Context, *empty.Empty) (*Loans, error)
	GetLoanByCode(context.Context, *GetLoanByCodeReq) (*Loan, error)
	mustEmbedUnimplementedLoanApiServer()
}

// UnimplementedLoanApiServer must be embedded to have forward compatible implementations.
type UnimplementedLoanApiServer struct {
}

func (UnimplementedLoanApiServer) GetMySummary(context.Context, *empty.Empty) (*LoanSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySummary not implemented")
}
func (UnimplementedLoanApiServer) SimulateLoan(context.Context, *SimulateLoanReq) (*LoanSimulation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateLoan not implemented")
}
func (UnimplementedLoanApiServer) CreateLoan(context.Context, *CreateLoanReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoan not implemented")
}
func (UnimplementedLoanApiServer) GetLoans(context.Context, *empty.Empty) (*Loans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoans not implemented")
}
func (UnimplementedLoanApiServer) GetLoanByCode(context.Context, *GetLoanByCodeReq) (*Loan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanByCode not implemented")
}
func (UnimplementedLoanApiServer) mustEmbedUnimplementedLoanApiServer() {}

// UnsafeLoanApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanApiServer will
// result in compilation errors.
type UnsafeLoanApiServer interface {
	mustEmbedUnimplementedLoanApiServer()
}

func RegisterLoanApiServer(s *grpc.Server, srv LoanApiServer) {
	s.RegisterService(&_LoanApi_serviceDesc, srv)
}

func _LoanApi_GetMySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanApiServer).GetMySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan.LoanApi/GetMySummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanApiServer).GetMySummary(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanApi_SimulateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateLoanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanApiServer).SimulateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan.LoanApi/SimulateLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanApiServer).SimulateLoan(ctx, req.(*SimulateLoanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanApi_CreateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanApiServer).CreateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan.LoanApi/CreateLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanApiServer).CreateLoan(ctx, req.(*CreateLoanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanApi_GetLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanApiServer).GetLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan.LoanApi/GetLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanApiServer).GetLoans(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanApi_GetLoanByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanApiServer).GetLoanByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan.LoanApi/GetLoanByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanApiServer).GetLoanByCode(ctx, req.(*GetLoanByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoanApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loan.LoanApi",
	HandlerType: (*LoanApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMySummary",
			Handler:    _LoanApi_GetMySummary_Handler,
		},
		{
			MethodName: "SimulateLoan",
			Handler:    _LoanApi_SimulateLoan_Handler,
		},
		{
			MethodName: "CreateLoan",
			Handler:    _LoanApi_CreateLoan_Handler,
		},
		{
			MethodName: "GetLoans",
			Handler:    _LoanApi_GetLoans_Handler,
		},
		{
			MethodName: "GetLoanByCode",
			Handler:    _LoanApi_GetLoanByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan.proto",
}
